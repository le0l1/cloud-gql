type Order implements Node {
  id: ID!
  "订单总金额"
  totalCountCount: String
  "订单商品"
  goods: [Good]
  "订单减免金额"
  discount: Number
  "订单状态"
  orderStatus: OrderStatus
}

enum OrderStatus {
  "待付款"
  PENDING
  "待发货"
  WAIT_SHIP
  "待收货"
  WAIT_RECEIPT
  "待评价"
  WAIT_EVALUATION
}

type OrderActionResult {
  id: ID
  status: Boolean
}

input OrderGood {
  "商品id"
  goodId: ID!
  "商品数量"
  quantity: Int!
}

input CreateOrderInput {
  "用户id"
  userId: ID!
  "收货地址id"
  addressId: ID!
  "商品数组"
  goodArr: [OrderGood!]!
  "优惠劵id数组"
  couponIds: [ID!]
  "支付方式"
  paymentMethod: PAYMENTMETHOD
}

input UpdateOrderInput {
  id: ID!
  orderStatus: OrderStatus!
}

input DeleteOrder {
  id: ID!
}

input OrderQuery {
  "页面size"
  limit: Int
  "页数"
  offset: Int
  userId: ID
  shopId: ID
}

type OrderConnection implements Connection {
  pageInfo: PageInfo
  edges: [Order!]
}

type OrderPayprepare {
  orderNumber: String
  totalCount: String
  payPrepare: WXPayPrepare
}

extend type Mutation {
  "创建订单"
  createOrder(createOrderInput: CreateOrderInput!): OrderPayprepare
  "更新订单"
  updateOrder(updateOrderInput: UpdateOrderInput!): OrderActionResult
  "删除订单"
  deleteOrder(id: ID!): OrderActionResult
}

extend type Query {
  "查询订单列表"
  orders(query: OrderQuery!): OrderConnection
  "查询单一订单"
  order(id: ID!): Order
}