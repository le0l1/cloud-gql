"用户"
type User implements Node {
  "用户id"
  id: ID!
  
  "用户姓名"
  name: String

  "用户头像"
  profilePicture: String

  "用户手机号"
  phone: Number

  "汽修厂名称"
  garage: String

  "订货城市"
  city: String

  "地区"
  area: String

  "详细地址"
  address: String

  "用户角色"
  role: Role

  "账户余额"
  totalFee: Float

  "金币"
  gold: Number
}

"用户注册输入"
input UserRegisterInput {
  "用户姓名"
  name: String

  "用户手机号"
  phone: Number!

  "用户密码"
  password: String!

  "汽修厂名称"
  garage: String!

  "订货城市"
  city: String!

  "地区"
  area: String!

  "详细地址"
  address: String

  "短信验证码"
  smsCode: Number!

  "用户角色"
  role: Role
  
  "若用户选择角色为 MERCHANT 时, 则需要传入对应用户选择的商户类型(ShopTye)"
  shopType: ShopType
}

"用户登录输入"
input UserLoginInput {
  "用户手机号"
  phone: Number!
  "用户密码"
  password: String!
}

"用户查询输入"
input UsersQueryInput {
  "模糊查询文本"
  tsQuery: String
  "用户筛选条件"
  filters: UsersQueryFilter
  "偏离值"
  offset: Int
  "分页条数"
  limit: Int
}

"用户角色"
enum Role {
  "顾客"
  CUSTOMER
  "商家"
  MERCHANT
  "管理员"
  ROOT
}

"用户查询筛选条件"
input UsersQueryFilter {
  "地区"
  area: String
  "角色"
  role: Role
}

"单一用户查询"
input UserQueryInput {
  "用户id"
  id: ID!
}

"用户注册返回"
type UserRegisterResult {
  "用户id"
  id: ID!
}

"用户登陆返回"
type UserLoginResult {
  "用户id"
  id: ID!
  
  "用户姓名"
  name: String

  "用户头像"
  profilePicture: String

  "用户手机号"
  phone: Number

  "汽修厂名称"
  garage: String

  "订货城市"
  city: String

  "地区"
  area: String

  "详细地址"
  address: String

  "用户角色"
  role: Role

  "账户余额"
  totalFee: Float

  "金币"
  gold: Number
  
  "用户登陆凭证"
  token: String
}

"用户删除"
input UserDeleteInput {
  "指定删除用户id"
  id: ID!
}

"找回密码输入"
input RetrievePasswordInput {
  "手机号码"
  phone: Number!

  "短信验证码"
  smsCode: Number!

  "重新设置的密码"
  password: String!
}

"删除用户返回"
type UserDeleteResult {
  "被删除id"
  id: ID!
  "删除结果"
  status: Boolean
}
"找回密码结果"
type RetrievePasswordResult {
  "被删除id"
  id: ID!
  "删除结果"
  status: Boolean
}

"用户列表"
type UserConnection  implements Connection {
  pageInfo: PageInfo!
  edges: [User!]
}

type UserActionResult {
  "被操作的用户id"
  id: ID

  "操作状态"
  status: Boolean
}


input UserUpdateInput {
  "用户id"
  id: ID!

  "用户姓名"
  name: String

  "用户头像"
  profilePicture: String

  "用户手机号"
  phone: Number

  "汽修厂名称"
  garage: String

  "订货城市"
  city: String

  "地区"
  area: String

  "详细地址"
  address: String
}

type UserDecode {
  phone: String
  password: String
}

extend type Query {
  users(usersQueryInput: UsersQueryInput!): UserConnection!
  user(userQueryInput: UserQueryInput!): User
  userPassword(userQueryInput:UserQueryInput!): UserDecode! @auth(requires: ROOT)
}

extend type Mutation {
  "用户注册"
  register(userRegisterInput: UserRegisterInput!): UserRegisterResult!
  "用户登录"
  loginIn(userLoginInput: UserLoginInput!): UserLoginResult!
  "用户删除"
  deleteUser(userDeleteInput: UserDeleteInput!): UserActionResult!
    @auth(requires: ROOT)

  "找回密码"
  retrievePassword(
    retrievePasswordInput: RetrievePasswordInput!
  ): RetrievePasswordResult!

  "升级用户信息"
  updateUser(userUpdateInput: UserUpdateInput!):UserActionResult
}
