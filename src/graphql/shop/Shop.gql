"商户"
type Shop  implements Node {
  "商户id"
  id: ID!
  "商户名称"
  name: String
  "商户QQ"
  qqchat: Number
  "商户微信"
  wechat: String
  "商户电话"
  phone: Number
  "商户介绍"
  description: String
  "商户详情轮播"
  shopBanner:[Banner!]
  "商户状态"
  status: ShopStatus
  "商户审核状态"
  isPassed: Boolean
}

enum ShopStatus {
  "正常"
  NORMAL
  "暂停营业"
  SUSPEND
}

input ShopQueryFilter {
  status: ShopStatus
}

"商户查询"
input ShopsQueryInput {
  "模糊查询"
  tsQuery: String
  "筛选条件"
  filter: ShopQueryFilter
  "页面size"
  first: Int
  "分页游标"
  after: ID
  "商户审核状态"
  isPassed: Boolean
}


"创建商户输入"
input ShopCreateInput {
  "商户名称"
  name: String
  "商户QQ"
  qqchat: Number
  "商户微信"
  wechat: String
  "商户电话"
  phone: Number
  "商户介绍"
  description: String
  "商户状态"
  status: ShopStatus
  "商家id"
  belongto: ID!
}

"删除商户输入"
input ShopDeleteInput {
  id: ID!
}

"更新商户输入"
input ShopUpdateInput {
  id: ID!
  "商户名称"
  name: String
  "商户QQ"
  qqchat: Number
  "商户微信"
  wechat: String
  "商户电话"
  phone: Number
  "商户介绍"
  description: String
  "商户状态"
  status: ShopStatus
  "商户审核状态"
  isPassed: Boolean
}

type ShopEdge {
  cursor: String!
  node: Shop
}

"商户列表"
type ShopConnection {
  pageInfo: PageInfo!
  edges: [ShopEdge!]
}

"商户创建结果"
type ShopResult {
  id: ID!
  status: Boolean
}

extend type Query {
  "商户列表查询 支持模糊查询 筛选条件"
  shops(query:ShopsQueryInput): ShopConnection! @auth
}


extend type Mutation {
  "创建商户"
  createShop(shopCreateInput: ShopCreateInput!): ShopResult! 
  "删除商户"
  deleteShop(shopDeleteInput: ShopDeleteInput!): ShopResult! @auth(requires: ROOT)
  "更新商户信息"
  updateShop(shopUpdateInput: ShopUpdateInput!): ShopResult! @auth(requires: MERCHANT)
}


